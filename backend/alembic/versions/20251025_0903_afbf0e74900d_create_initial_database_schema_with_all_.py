"""Create initial database schema with all models

Revision ID: afbf0e74900d
Revises:
Create Date: 2025-10-25 09:03:23.035513

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "afbf0e74900d"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("hashed_password", sa.Text(), nullable=False),
        sa.Column("full_name", sa.String(length=255), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("garmin_user_id", sa.String(length=255), nullable=True),
        sa.Column("garmin_access_token", sa.Text(), nullable=True),
        sa.Column("garmin_refresh_token", sa.Text(), nullable=True),
        sa.Column(
            "garmin_token_expires_at", sa.TIMESTAMP(timezone=True), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(
        op.f("ix_users_garmin_user_id"), "users", ["garmin_user_id"], unique=True
    )
    op.create_table(
        "goals",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("title", sa.String(length=200), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("goal_type", sa.String(length=50), nullable=False),
        sa.Column("target_date", sa.Date(), nullable=True),
        sa.Column("created_date", sa.Date(), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("is_completed", sa.Boolean(), nullable=False),
        sa.Column("completed_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("progress_notes", sa.Text(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("ix_goals_target_date", "goals", ["target_date"], unique=False)
    op.create_index(op.f("ix_goals_user_id"), "goals", ["user_id"], unique=False)
    op.create_index(
        "ix_goals_user_status", "goals", ["user_id", "status"], unique=False
    )
    op.create_table(
        "health_metrics",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("hrv_ms", sa.Integer(), nullable=True),
        sa.Column("resting_hr", sa.Integer(), nullable=True),
        sa.Column("sleep_duration_minutes", sa.Integer(), nullable=True),
        sa.Column("sleep_score", sa.Integer(), nullable=True),
        sa.Column("stress_level", sa.Integer(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.CheckConstraint(
            "sleep_duration_minutes >= 0", name="ck_sleep_duration_positive"
        ),
        sa.CheckConstraint(
            "sleep_score >= 0 AND sleep_score <= 100", name="ck_sleep_score_range"
        ),
        sa.CheckConstraint(
            "stress_level >= 0 AND stress_level <= 100", name="ck_stress_level_range"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_health_metrics_user_date",
        "health_metrics",
        ["user_id", "date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_health_metrics_user_id"), "health_metrics", ["user_id"], unique=False
    )
    op.create_index(
        "uq_health_metrics_user_date",
        "health_metrics",
        ["user_id", "date"],
        unique=True,
    )
    op.create_table(
        "insights",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("insight_type", sa.String(length=50), nullable=False),
        sa.Column("title", sa.String(length=200), nullable=False),
        sa.Column("content", sa.Text(), nullable=False),
        sa.Column("priority", sa.String(length=20), nullable=False),
        sa.Column("data_points_analyzed", sa.Integer(), nullable=True),
        sa.Column("confidence_score", sa.Float(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("ix_insights_type", "insights", ["insight_type"], unique=False)
    op.create_index(
        "ix_insights_user_dates",
        "insights",
        ["user_id", "start_date", "end_date"],
        unique=False,
    )
    op.create_index(op.f("ix_insights_user_id"), "insights", ["user_id"], unique=False)
    op.create_table(
        "recovery_scores",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("health_metrics_id", sa.Integer(), nullable=True),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("overall_score", sa.Integer(), nullable=False),
        sa.Column("hrv_component", sa.Float(), nullable=True),
        sa.Column("hr_component", sa.Float(), nullable=True),
        sa.Column("sleep_component", sa.Float(), nullable=True),
        sa.Column("acwr_component", sa.Float(), nullable=True),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("explanation", sa.Text(), nullable=False),
        sa.Column("cached_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("cache_expires_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.CheckConstraint(
            "status IN ('green', 'yellow', 'red')", name="ck_status_values"
        ),
        sa.CheckConstraint(
            "overall_score >= 0 AND overall_score <= 100", name="ck_overall_score_range"
        ),
        sa.ForeignKeyConstraint(
            ["health_metrics_id"], ["health_metrics.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_recovery_scores_user_date",
        "recovery_scores",
        ["user_id", "date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_recovery_scores_user_id"), "recovery_scores", ["user_id"], unique=False
    )
    op.create_index(
        "uq_recovery_scores_user_date",
        "recovery_scores",
        ["user_id", "date"],
        unique=True,
    )
    op.create_table(
        "training_plans",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("goal_id", sa.Integer(), nullable=True),
        sa.Column("name", sa.String(length=200), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("plan_type", sa.String(length=50), nullable=False),
        sa.Column("start_date", sa.Date(), nullable=False),
        sa.Column("end_date", sa.Date(), nullable=False),
        sa.Column("duration_weeks", sa.Integer(), nullable=False),
        sa.Column("status", sa.String(length=20), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("last_adapted_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("adaptation_notes", sa.Text(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(["goal_id"], ["goals.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_training_plans_active", "training_plans", ["is_active"], unique=False
    )
    op.create_index(
        op.f("ix_training_plans_user_id"), "training_plans", ["user_id"], unique=False
    )
    op.create_index(
        "ix_training_plans_user_status",
        "training_plans",
        ["user_id", "status"],
        unique=False,
    )
    op.create_table(
        "planned_workouts",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("training_plan_id", sa.Integer(), nullable=False),
        sa.Column("scheduled_date", sa.Date(), nullable=False),
        sa.Column("week_number", sa.Integer(), nullable=False),
        sa.Column("day_of_week", sa.Integer(), nullable=False),
        sa.Column("workout_type", sa.String(length=50), nullable=False),
        sa.Column("target_duration_minutes", sa.Integer(), nullable=True),
        sa.Column("target_distance_km", sa.Float(), nullable=True),
        sa.Column("intensity_guidance", sa.String(length=50), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("is_completed", sa.Boolean(), nullable=False),
        sa.Column("completed_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("skipped", sa.Boolean(), nullable=False),
        sa.Column("skip_reason", sa.Text(), nullable=True),
        sa.Column("was_adapted", sa.Boolean(), nullable=False),
        sa.Column("adaptation_reason", sa.Text(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["training_plan_id"], ["training_plans.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_planned_workouts_completion",
        "planned_workouts",
        ["is_completed"],
        unique=False,
    )
    op.create_index(
        "ix_planned_workouts_plan_date",
        "planned_workouts",
        ["training_plan_id", "scheduled_date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_planned_workouts_training_plan_id"),
        "planned_workouts",
        ["training_plan_id"],
        unique=False,
    )
    op.create_table(
        "workout_recommendations",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("recovery_score_id", sa.Integer(), nullable=False),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("intensity_level", sa.String(length=20), nullable=False),
        sa.Column("workout_type", sa.String(length=50), nullable=False),
        sa.Column("duration_minutes", sa.Integer(), nullable=False),
        sa.Column("rationale", sa.Text(), nullable=False),
        sa.Column("alternative_workout_1", sa.String(length=50), nullable=True),
        sa.Column("alternative_workout_2", sa.String(length=50), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["recovery_score_id"], ["recovery_scores.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("recovery_score_id"),
    )
    op.create_index(
        "ix_workout_recommendations_user_date",
        "workout_recommendations",
        ["user_id", "date"],
        unique=False,
    )
    op.create_index(
        op.f("ix_workout_recommendations_user_id"),
        "workout_recommendations",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        "uq_workout_recommendations_user_date",
        "workout_recommendations",
        ["user_id", "date"],
        unique=True,
    )
    op.create_table(
        "workouts",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("planned_workout_id", sa.Integer(), nullable=True),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("workout_type", sa.String(length=50), nullable=False),
        sa.Column("duration_minutes", sa.Integer(), nullable=False),
        sa.Column("distance_km", sa.Float(), nullable=True),
        sa.Column("avg_heart_rate", sa.Integer(), nullable=True),
        sa.Column("max_heart_rate", sa.Integer(), nullable=True),
        sa.Column("training_load", sa.Integer(), nullable=True),
        sa.Column("perceived_exertion", sa.Integer(), nullable=True),
        sa.Column("source", sa.String(length=20), nullable=False),
        sa.Column("garmin_activity_id", sa.String(length=255), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["planned_workout_id"], ["planned_workouts.id"], ondelete="SET NULL"
        ),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("garmin_activity_id"),
    )
    op.create_index(
        "ix_workouts_garmin_activity", "workouts", ["garmin_activity_id"], unique=True
    )
    op.create_index(
        "ix_workouts_user_date", "workouts", ["user_id", "date"], unique=False
    )
    op.create_index(op.f("ix_workouts_user_id"), "workouts", ["user_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_workouts_user_id"), table_name="workouts")
    op.drop_index("ix_workouts_user_date", table_name="workouts")
    op.drop_index("ix_workouts_garmin_activity", table_name="workouts")
    op.drop_table("workouts")
    op.drop_index(
        "uq_workout_recommendations_user_date", table_name="workout_recommendations"
    )
    op.drop_index(
        op.f("ix_workout_recommendations_user_id"), table_name="workout_recommendations"
    )
    op.drop_index(
        "ix_workout_recommendations_user_date", table_name="workout_recommendations"
    )
    op.drop_table("workout_recommendations")
    op.drop_index(
        op.f("ix_planned_workouts_training_plan_id"), table_name="planned_workouts"
    )
    op.drop_index("ix_planned_workouts_plan_date", table_name="planned_workouts")
    op.drop_index("ix_planned_workouts_completion", table_name="planned_workouts")
    op.drop_table("planned_workouts")
    op.drop_index("ix_training_plans_user_status", table_name="training_plans")
    op.drop_index(op.f("ix_training_plans_user_id"), table_name="training_plans")
    op.drop_index("ix_training_plans_active", table_name="training_plans")
    op.drop_table("training_plans")
    op.drop_index("uq_recovery_scores_user_date", table_name="recovery_scores")
    op.drop_index(op.f("ix_recovery_scores_user_id"), table_name="recovery_scores")
    op.drop_index("ix_recovery_scores_user_date", table_name="recovery_scores")
    op.drop_table("recovery_scores")
    op.drop_index(op.f("ix_insights_user_id"), table_name="insights")
    op.drop_index("ix_insights_user_dates", table_name="insights")
    op.drop_index("ix_insights_type", table_name="insights")
    op.drop_table("insights")
    op.drop_index("uq_health_metrics_user_date", table_name="health_metrics")
    op.drop_index(op.f("ix_health_metrics_user_id"), table_name="health_metrics")
    op.drop_index("ix_health_metrics_user_date", table_name="health_metrics")
    op.drop_table("health_metrics")
    op.drop_index("ix_goals_user_status", table_name="goals")
    op.drop_index(op.f("ix_goals_user_id"), table_name="goals")
    op.drop_index("ix_goals_target_date", table_name="goals")
    op.drop_table("goals")
    op.drop_index(op.f("ix_users_garmin_user_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
