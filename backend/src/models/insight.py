"""Insight model for AI-generated training analysis."""

import uuid
from datetime import date, datetime
from typing import TYPE_CHECKING, Optional

from sqlalchemy import Date, Integer, Float, String, Text, ForeignKey, Index, TIMESTAMP
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import Mapped, mapped_column, relationship

from src.database.connection import Base


if TYPE_CHECKING:
    from src.models.user import User


class Insight(Base):
    """AI-generated insight about training patterns and recommendations.

    Generated weekly by analyzing health metrics, workouts, and recovery patterns.
    Provides actionable feedback to help athletes optimize their training.
    """

    __tablename__ = "insights"

    # Primary Key
    id: Mapped[int] = mapped_column(
        Integer,
        primary_key=True,
        autoincrement=True,
        doc="Unique insight record ID",
    )

    # Foreign Key
    user_id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=True),
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=False,
        index=True,
        doc="Owner of this insight",
    )

    # Date Range
    start_date: Mapped[date] = mapped_column(
        Date, nullable=False, doc="Start date of analysis period"
    )
    end_date: Mapped[date] = mapped_column(
        Date, nullable=False, doc="End date of analysis period"
    )

    # Insight Details
    insight_type: Mapped[str] = mapped_column(
        String(50),
        nullable=False,
        doc="Type of insight: pattern, warning, achievement, suggestion",
    )
    title: Mapped[str] = mapped_column(
        String(200), nullable=False, doc="Short title summarizing the insight"
    )
    content: Mapped[str] = mapped_column(
        Text, nullable=False, doc="Full insight text generated by Claude AI"
    )
    priority: Mapped[str] = mapped_column(
        String(20),
        nullable=False,
        default="medium",
        doc="Priority level: high, medium, low",
    )

    # Metadata
    data_points_analyzed: Mapped[Optional[int]] = mapped_column(
        Integer, nullable=True, doc="Number of data points used in analysis"
    )
    confidence_score: Mapped[Optional[float]] = mapped_column(
        Float, nullable=True, doc="AI confidence in this insight (0.0-1.0)"
    )

    # Timestamps
    created_at: Mapped[datetime] = mapped_column(
        TIMESTAMP(timezone=True),
        nullable=False,
        default=datetime.utcnow,
        doc="When this insight was generated",
    )

    # Relationships
    user: Mapped["User"] = relationship("User", back_populates="insights")

    # Table constraints
    __table_args__ = (
        # Compound index for fast queries by user and date range
        Index("ix_insights_user_dates", "user_id", "start_date", "end_date"),
        # Index for filtering by type
        Index("ix_insights_type", "insight_type"),
    )

    def __repr__(self) -> str:
        """String representation of Insight."""
        return f"<Insight(user_id={self.user_id}, type={self.insight_type}, title={self.title})>"

    @property
    def duration_days(self) -> int:
        """Calculate the number of days analyzed."""
        return (self.end_date - self.start_date).days + 1
